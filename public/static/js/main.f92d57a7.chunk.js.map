{"version":3,"sources":["routes/CreateRoom.js","routes/Room.js","App.js","serviceWorker.js","index.js"],"names":["CreateRoom","props","React","createElement","Container","className","Button","onClick","id","uuid","history","push","concat","worker","Worker","Room","_useState","useState","_useState2","_slicedToArray","connectionEstablished","setConnection","_useState3","_useState4","file","setFile","_useState5","_useState6","gotFile","setGotFile","useHistory","socketRef","useRef","peerRef","fileNameRef","roomID","match","params","handleReceivingData","data","toString","includes","parsed","JSON","parse","current","fileName","postMessage","useEffect","io","connect","emit","on","users","userToSignal","callerID","peer","Peer","initiator","trickle","signal","createPeer","payload","incomingSignal","addPeer","alert","goBack","body","downloadPrompt","Form","Label","Control","size","onChange","e","target","files","type","stream","console","log","reader","getReader","read","then","obj","handlereading","done","value","write","stringify","name","Spinner","animation","variant","Group","window","location","href","readOnly","document","getElementById","select","execCommand","addEventListener","event","fileStream","streamSaver","createWriteStream","pipeTo","App","BrowserRouter","Switch","Route","path","exact","component","Boolean","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oQAqBeA,EAhBI,SAACC,GAMhB,OACIC,IAAAC,cAACC,IAAS,CAACC,UAAU,eACrBH,IAAAC,cAAA,WAAKD,IAAAC,cAAA,WACLD,IAAAC,cAAA,UAAI,qBACJD,IAAAC,cAAA,WAAKD,IAAAC,cAAA,WACLD,IAAAC,cAACG,IAAM,CAACD,UAAU,iBAAiBE,QAVvC,WACI,IAAMC,EAAKC,cACXR,EAAMS,QAAQC,KAAK,SAADC,OAAUJ,MAQwB,iB,6ECRtDK,EAAS,IAAIC,OAAO,gBA4MXC,EA1MF,SAACd,GACZ,IAAAe,EAA+CC,oBAAS,GAAMC,EAAAC,YAAAH,EAAA,GAAvDI,EAAqBF,EAAA,GAAEG,EAAaH,EAAA,GAC3CI,EAAwBL,qBAAUM,EAAAJ,YAAAG,EAAA,GAA3BE,EAAID,EAAA,GAAEE,EAAOF,EAAA,GACpBG,EAA8BT,oBAAS,GAAMU,EAAAR,YAAAO,EAAA,GAAtCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GACpBjB,EAAUoB,cAEVC,EAAYC,mBACZC,EAAUD,mBACVE,EAAcF,iBAAO,IAErBG,EAASlC,EAAMmC,MAAMC,OAAOF,OA4DlC,SAASG,EAAoBC,GAC3B,GAAIA,EAAKC,WAAWC,SAAS,QAAS,CACpCZ,GAAW,GACX,IAAMa,EAASC,KAAKC,MAAML,GAC1BL,EAAYW,QAAUH,EAAOI,cAE7BjC,EAAOkC,YAAYR,GAhEvBS,qBAAU,WACRjB,EAAUc,QAAUI,IAAGC,QAAQ,KAC/BnB,EAAUc,QAAQM,KAAK,YAAahB,GACpCJ,EAAUc,QAAQO,GAAG,aAAa,SAACC,GACjCpB,EAAQY,QAkBZ,SAAoBS,EAAcC,GAChC,IAAMC,EAAO,IAAIC,IAAK,CACpBC,WAAW,EACXC,SAAS,IAaX,OAVAH,EAAKJ,GAAG,UAAU,SAACQ,GACjB7B,EAAUc,QAAQM,KAAK,iBAAkB,CACvCG,eACAC,WACAK,cAIJJ,EAAKJ,GAAG,OAAQd,GAETkB,EAlCaK,CAAWR,EAAM,GAAItB,EAAUc,QAAQrC,OAG3DuB,EAAUc,QAAQO,GAAG,eAAe,SAACU,GACnC7B,EAAQY,QAiCZ,SAAiBkB,EAAgBR,GAC/B,IAAMC,EAAO,IAAIC,IAAK,CACpBC,WAAW,EACXC,SAAS,IAWX,OARAH,EAAKJ,GAAG,UAAU,SAACQ,GACjB7B,EAAUc,QAAQM,KAAK,mBAAoB,CAAES,SAAQL,gBAGvDC,EAAKJ,GAAG,OAAQd,GAEhBkB,EAAKI,OAAOG,GACZ1C,GAAc,GACPmC,EA/CaQ,CAAQF,EAAQF,OAAQE,EAAQP,aAGpDxB,EAAUc,QAAQO,GAAG,6BAA6B,SAACU,GACjD7B,EAAQY,QAAQe,OAAOE,EAAQF,QAC/BvC,GAAc,MAGhBU,EAAUc,QAAQO,GAAG,aAAa,WAChCa,MAAM,gBACNvD,EAAQwD,cAET,IAsFH,IAMIC,EAwDAC,EAcJ,OApEED,EADE/C,EAEAlB,IAAAC,cAACC,IAAS,CAACC,UAAU,eACnBH,IAAAC,cAAA,WACAD,IAAAC,cAAA,WACAD,IAAAC,cAAA,UAAI,yDACJD,IAAAC,cAAA,WAAKD,IAAAC,cAAA,WACLD,IAAAC,cAACkE,IAAI,KACHnE,IAAAC,cAACkE,IAAKC,MAAK,KAAC,oBACZpE,IAAAC,cAACkE,IAAKE,QAAO,CACXC,KAAK,KACLC,SA9CV,SAAoBC,GAClBjD,EAAQiD,EAAEC,OAAOC,MAAM,KA8CfC,KAAK,UAGT3E,IAAAC,cAAA,WACAD,IAAAC,cAACG,IAAM,CAACC,QA/Cd,WACE,IAAMiD,EAAOvB,EAAQY,QACfiC,EAAStD,EAAKsD,SACpBC,QAAQC,IAAIF,GACZ,IAAMG,EAASH,EAAOI,YACtBH,QAAQC,IAAIC,GAEZA,EAAOE,OAAOC,MAAK,SAACC,IAIpB,SAASC,EAAcC,EAAMC,GAC3B,GAAID,EAEF,YADA/B,EAAKiC,MAAM9C,KAAK+C,UAAU,CAAEH,MAAM,EAAMzC,SAAUtB,EAAKmE,QAIzDnC,EAAKiC,MAAMD,GACXP,EAAOE,OAAOC,MAAK,SAACC,GAClBC,EAAcD,EAAIE,KAAMF,EAAIG,UAX9BF,CAAcD,EAAIE,KAAMF,EAAIG,YAuCC,cAK7BtF,IAAAC,cAACC,IAAS,CAACC,UAAU,eACnBH,IAAAC,cAAA,WACAD,IAAAC,cAAA,WACAD,IAAAC,cAAA,WACAD,IAAAC,cAAA,UAAI,gCACJD,IAAAC,cAAA,WACAD,IAAAC,cAAA,WACAD,IAAAC,cAACyF,IAAO,CAACC,UAAU,OAAOC,QAAQ,YAClC5F,IAAAC,cAACyF,IAAO,CAACC,UAAU,OAAOC,QAAQ,YAClC5F,IAAAC,cAACyF,IAAO,CAACC,UAAU,OAAOC,QAAQ,WAClC5F,IAAAC,cAAA,WACAD,IAAAC,cAAA,WACAD,IAAAC,cAACkE,IAAI,KACHnE,IAAAC,cAACkE,IAAK0B,MAAK,KACT7F,IAAAC,cAACkE,IAAKC,MAAK,KAAC,+CACZpE,IAAAC,cAAA,WACAD,IAAAC,cAAA,WACAD,IAAAC,cAACkE,IAAKE,QAAO,CACXC,KAAK,KACLhE,GAAG,OACHqE,KAAK,OACLW,MAAOQ,OAAOC,SAASC,KACvBC,UAAQ,KAGZjG,IAAAC,cAAA,WACAD,IAAAC,cAACG,IAAM,CAACC,QAtDL,WACE6F,SAASC,eAAe,QAC9BC,SACLF,SAASG,YAAY,SAmDQT,QAAQ,WAAU,uBAS7ClE,IACFwC,EACElE,IAAAC,cAACC,IAAS,CAACC,UAAU,eACnBH,IAAAC,cAAA,WAAKD,IAAAC,cAAA,WACLD,IAAAC,cAAA,UAAI,kEAGJD,IAAAC,cAAA,WACAD,IAAAC,cAACG,IAAM,CAACC,QA7Gd,WACEsB,GAAW,GACXhB,EAAOkC,YAAY,YACnBlC,EAAO2F,iBAAiB,WAAW,SAACC,GAClC,IAAM3B,EAAS2B,EAAMlE,KAAKuC,SACpB4B,EAAaC,IAAYC,kBAAkB1E,EAAYW,SAC7DiC,EAAO+B,OAAOH,QAuGe,SAM/BxG,IAAAC,cAACC,IAAS,KACP+D,EACAC,IC/LQ0C,MAXf,WACE,OACE5G,IAAAC,cAAC4G,IAAa,KACZ7G,IAAAC,cAAC6G,IAAM,KACL9G,IAAAC,cAAC8G,IAAK,CAACC,KAAK,IAAIC,OAAK,EAACC,UAAWpH,IACjCE,IAAAC,cAAC8G,IAAK,CAACC,KAAK,gBAAgBE,UAAWrG,OCE3BsG,QACW,cAA7BrB,OAAOC,SAASqB,UAEe,UAA7BtB,OAAOC,SAASqB,UAEhBtB,OAAOC,SAASqB,SAASlF,MACvB,2DCZNmF,IAASC,OACPtH,IAAAC,cAACD,IAAMuH,WAAU,KACfvH,IAAAC,cAAC2G,EAAG,OAENV,SAASC,eAAe,SDyHpB,kBAAmBqB,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,a","file":"static/js/main.f92d57a7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { v1 as uuid } from \"uuid\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Button,Container } from 'react-bootstrap';\r\n\r\nconst CreateRoom = (props) => {\r\n    function create() {\r\n        const id = uuid();\r\n        props.history.push(`/room/${id}`);\r\n    }\r\n\r\n    return (\r\n        <Container className=\"text-center\">\r\n        <br/><br/>\r\n        <h1>P2P File Transfer</h1>\r\n        <br/><br/>\r\n        <Button className=\"btn btn-danger\" onClick={create}>Create room</Button>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default CreateRoom;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport Peer from \"simple-peer\";\r\nimport streamSaver from \"streamsaver\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Button, Container, Spinner, Form } from \"react-bootstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst worker = new Worker(\"../worker.js\");\r\n\r\nconst Room = (props) => {\r\n  const [connectionEstablished, setConnection] = useState(false);\r\n  const [file, setFile] = useState();\r\n  const [gotFile, setGotFile] = useState(false);\r\n  const history = useHistory();\r\n\r\n  const socketRef = useRef();\r\n  const peerRef = useRef();\r\n  const fileNameRef = useRef(\"\");\r\n\r\n  const roomID = props.match.params.roomID;\r\n\r\n  useEffect(() => {\r\n    socketRef.current = io.connect(\"/\");\r\n    socketRef.current.emit(\"join room\", roomID);\r\n    socketRef.current.on(\"all users\", (users) => {\r\n      peerRef.current = createPeer(users[0], socketRef.current.id);\r\n    });\r\n\r\n    socketRef.current.on(\"user joined\", (payload) => {\r\n      peerRef.current = addPeer(payload.signal, payload.callerID);\r\n    });\r\n\r\n    socketRef.current.on(\"receiving returned signal\", (payload) => {\r\n      peerRef.current.signal(payload.signal);\r\n      setConnection(true);\r\n    });\r\n\r\n    socketRef.current.on(\"room full\", () => {\r\n      alert(\"room is full\");\r\n      history.goBack();\r\n    });\r\n  }, []);\r\n\r\n  function createPeer(userToSignal, callerID) {\r\n    const peer = new Peer({\r\n      initiator: true,\r\n      trickle: false,\r\n    });\r\n\r\n    peer.on(\"signal\", (signal) => {\r\n      socketRef.current.emit(\"sending signal\", {\r\n        userToSignal,\r\n        callerID,\r\n        signal,\r\n      });\r\n    });\r\n\r\n    peer.on(\"data\", handleReceivingData);\r\n\r\n    return peer;\r\n  }\r\n\r\n  function addPeer(incomingSignal, callerID) {\r\n    const peer = new Peer({\r\n      initiator: false,\r\n      trickle: false,\r\n    });\r\n\r\n    peer.on(\"signal\", (signal) => {\r\n      socketRef.current.emit(\"returning signal\", { signal, callerID });\r\n    });\r\n\r\n    peer.on(\"data\", handleReceivingData);\r\n\r\n    peer.signal(incomingSignal);\r\n    setConnection(true);\r\n    return peer;\r\n  }\r\n\r\n  function handleReceivingData(data) {\r\n    if (data.toString().includes(\"done\")) {\r\n      setGotFile(true);\r\n      const parsed = JSON.parse(data);\r\n      fileNameRef.current = parsed.fileName;\r\n    } else {\r\n      worker.postMessage(data);\r\n    }\r\n  }\r\n\r\n  function download() {\r\n    setGotFile(false);\r\n    worker.postMessage(\"download\");\r\n    worker.addEventListener(\"message\", (event) => {\r\n      const stream = event.data.stream();\r\n      const fileStream = streamSaver.createWriteStream(fileNameRef.current);\r\n      stream.pipeTo(fileStream);\r\n    });\r\n  }\r\n\r\n  function selectFile(e) {\r\n    setFile(e.target.files[0]);\r\n  }\r\n\r\n  function sendFile() {\r\n    const peer = peerRef.current;\r\n    const stream = file.stream();\r\n    console.log(stream);\r\n    const reader = stream.getReader();\r\n    console.log(reader);\r\n\r\n    reader.read().then((obj) => {\r\n      handlereading(obj.done, obj.value);\r\n    });\r\n\r\n    function handlereading(done, value) {\r\n      if (done) {\r\n        peer.write(JSON.stringify({ done: true, fileName: file.name }));\r\n        return;\r\n      }\r\n\r\n      peer.write(value);\r\n      reader.read().then((obj) => {\r\n        handlereading(obj.done, obj.value);\r\n      });\r\n    }\r\n  }\r\n\r\n  let copy = () => {\r\n    let text = document.getElementById(\"text\");\r\n    text.select();\r\n    document.execCommand(\"copy\");\r\n  };\r\n\r\n  let body;\r\n  if (connectionEstablished) {\r\n    body = (\r\n      <Container className=\"text-center\">\r\n        <br />\r\n        <br />\r\n        <h1>Connected With Peer (You can Share or Transfer Files)</h1>\r\n        <br/><br/>\r\n        <Form>\r\n          <Form.Label>Select the File:</Form.Label>\r\n          <Form.Control\r\n            size=\"lg\"\r\n            onChange={selectFile}\r\n            type=\"file\"\r\n          ></Form.Control>\r\n        </Form>\r\n        <br/>\r\n        <Button onClick={sendFile}>Send file</Button>\r\n      </Container>\r\n    );\r\n  } else {\r\n    body = (\r\n      <Container className=\"text-center\">\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <h1>Waiting for the Peer to Join</h1>\r\n        <br />\r\n        <br />\r\n        <Spinner animation=\"grow\" variant=\"primary\" />\r\n        <Spinner animation=\"grow\" variant=\"success\" />\r\n        <Spinner animation=\"grow\" variant=\"danger\" />\r\n        <br />\r\n        <br />\r\n        <Form>\r\n          <Form.Group>\r\n            <Form.Label>Your Room URL: (Share with Anyone in World)</Form.Label>\r\n            <br />\r\n            <br />\r\n            <Form.Control\r\n              size=\"lg\"\r\n              id=\"text\"\r\n              type=\"text\"\r\n              value={window.location.href}\r\n              readOnly\r\n            />\r\n          </Form.Group>\r\n          <br />\r\n          <Button onClick={copy} variant=\"primary\">\r\n            Copy to Clipboard\r\n          </Button>\r\n        </Form>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  let downloadPrompt;\r\n  if (gotFile) {\r\n    downloadPrompt = (\r\n      <Container className=\"text-center\">\r\n        <br/><br/>\r\n        <h3>\r\n          You have received a file. Would you like to download the file?\r\n        </h3>\r\n        <br/>\r\n        <Button onClick={download}>Yes</Button>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      {body}\r\n      {downloadPrompt}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Room;\r\n","import React from 'react';\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport CreateRoom from \"./routes/CreateRoom\";\r\nimport Room from \"./routes/Room\";\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route path=\"/\" exact component={CreateRoom} />\r\n        <Route path=\"/room/:roomID\" component={Room} />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}